# Enable favorite colors
colorscheme desertex

set-option global aligntab false
set-option global tabstop 4
set-option global indentwidth 4
map global insert <tab> '<a-;><gt>'
map global insert <s-tab> '<a-;><lt>'

hook global BufCreate .* %{
    # Always number lines
    add-highlighter global/ number-lines
    # Always soft-wrap lines
    add-highlighter global/ wrap -word -indent
}

# enable kak-lsp to do it's work
#evaluate-commands %sh{kak-lsp --kakoune -s $kak_session}

#lsp-auto-hover-enable

# Easy way to open/edit config
map -docstring "edit kakrc" global user e :e<space>~/.config/kak/kakrc<ret>
map -docstring "source kakrc" global user s :source<space>~/.config/kak/kakrc<ret>
map -docstring "start rover" global user r :terminal<space>rover<ret>
map -docstring "copy to X11 clipboard" global user c :xcopy<ret>
map -docstring "paste from X11 clipboard" global user v :xpaste<ret>

define-command -override -docstring "copy main selection to X11 clipboard" xcopy %{
    nop %sh{ (echo -n "$kak_selection" | xclip -i -f -selection primary | xclip -i -selection clipboard) < /dev/null > /dev/null 2>&1 & }
}

define-command -override -docstring "paste X11 clipboard at cursor" xpaste %{
    exec \i %sh{ xclip -selection clipboard -o } <esc>
}

define-command -override -docstring "Show flake8 style errors in python" flake8-lint %{
    declare-option line-specs flake8_errors
    remove-highlighter window/flake8
    evaluate-commands %sh{
        tmpfile=$(mktemp)
        errors=$(cat "${kak_buffile}" | flake8 - | tee $tmpfile)
        lines=$(echo "${errors}" | sed -E "s/.*:([0-9]+):[0-9]+: ([EW])/'\1|\2' /" | tr -d '\n')
        printf %s\\n "echo -debug setting highlights: set-option window flake8_errors %val{timestamp} ${lines}; set-option window flake8_errors %val{timestamp} ${lines}"
        if cat $tmpfile | grep "stdin:$kak_cursor_line:" 2>&1 > /dev/null ; then
            info_box=$(cat $tmpfile | grep "stdin:${kak_cursor_line}:" | sed -E 's/.*:([0-9]+):([0-9]+): ([EW][0-9]+) (.*)/info -anchor \1.1 -title "\3 (column \2)" "\4";/')
            printf %s\\n "echo -debug info: $info_box"
            printf %s\\n "$info_box"
        else
            printf %s\\n "echo -debug $(echo $errors | tr -d '\n')"
            printf %s\\n "echo -debug $(echo $errors | grep 'stdin:$kak_cursor_line' | tr -d '\n')"
            printf %s\\n "echo -debug ${kak_cursor_line}"
        fi
        rm "$tmpfile"

    }
    add-highlighter window/flake8 flag-lines red flake8_errors
}

declare-option -hidden str yapf_tmp_dir

define-command -override -params ..1 yapf-format \
    -docstring "Format a python buffer with yapf" %{
    evaluate-commands %sh{
        dir=$(mktemp -d "${TMPDIR:-/tmp}"/kak-yapf.XXXXXXXX)
        printf %s\\n "set-option buffer yapf_tmp_dir ${dir}"
        printf %s\\n "evaluate-commands -no-hooks write ${dir}/buf"
        printf %s\\n "echo -debug dir=$dir"
    }
    evaluate-commands %sh{
        dir=${kak_opt_yapf_tmp_dir}
        yapf -i "${dir}/buf" 2> "${dir}/stderr"
        if [ $? ]; then
            cp ${dir}/buf "${kak_buffile}"
        else
            # we should report error if linting isn't active
            printf %s\\n "echo -debug '$(cat ${dir}/stderr)'"
        fi
        rm -r ${dir}
    }
    edit!
}

# Register custom hooks whenever I open a markdown file.
# Because the filename filter is a regex, the literal period
# must be escaped
hook global WinSetOption filetype=markdown %{
    # Print in the debug buffer so that I can tell the hook fired
    echo -debug "Markdown Mode Enabled"
    # Create easy user-mode mapping to format tables
    map -docstring "format markdown table under cursor" buffer user t :md-format-table<ret>
    map -docstring "begin live-previewing this document in Firefox" buffer user p :md-preview<ret>
}

hook global WinSetOption filetype=python %{
    jedi-enable-autocomplete
    hook buffer NormalIdle .* %{
#        flake8-lint
    }
    hook buffer BufWritePre .* %{
        yapf-format
    }
}

hook global WinSetOption filetype=go %{
    go-enable-autocomplete
    map window user d :go-doc-info<ret>
    map window user g :go-jump<ret>
    hook buffer BufWritePre .* %{
        go-format
    }
}

define-command -override terminal -params .. %{
  evaluate-commands shell \
    -export session \
    -export client \
    %sh{
    	cmd="tmux split-window -h -b -l20 env KAK_SESSION=${kak_session} KAK_CLIENT=${kak_client} EDITOR=kak-connect %arg(@) "
        test $# = 0 && cmd="$cmd $SHELL"
        echo $cmd
    }
}
